#!/usr/bin/env python3

'''Encoder calibration for smart wheels with firwmare v1015+.
The entire calibration procedure is described at
https://git.ropod.org/ropod/smartwheel/blob/master/encoder_calibration_and_motor_phasing.txt

This script takes care of the first part of the calibration procedure, namely
the encoder calibration. Note that each wheel has to be calibrated separately.

To calibrate, make sure that an EtherCAT communication with the wheels can be
established (one can use SOEM's slaveinfo utility for that) and then
simply run this script as

    sudo ./ecat_encoder_calibration [network_interface_name] [slave_number]

where [network_interface_name] is the network interface of the EtherCAT
connection and [slave_number] is the index of the smart wheel that
needs to be calibrated (note: the index expected by this script is
zero-based; on the other hand, slaveinfo returns a one-based index).

After running the script, the current status of the calibration state
machine for the two motor encoders and the pivot encoder will be printed
in the form

x - y - z

To calibrate, simply rotate the pivot and then the individual wheels
until all (x, y, z) reach a state of 7 (success) or 8 (fail).

If the calibration is successful for all encoders, the second stage of the
calibration (finding the optimal motor phasing) can take place.

Acknowledgements: The calibration script has been adapted from
    https://github.com/bnjmnp/pysoem/blob/master/examples/basic_example.py
and reuses almost all of the slave setup code in that script.
'''

import sys
import struct
import time
import threading
from collections import namedtuple

import pysoem

class WheelCalibrator(object):
    def __init__(self, ifname, slave_number):
        self._ifname = ifname
        self._slave_number = slave_number
        self._pd_thread_stop_event = threading.Event()
        self._ch_thread_stop_event = threading.Event()
        self._actual_wkc = 0
        self._master = pysoem.Master()
        self._master.in_op = False
        self._master.do_check_state = False

        # TODO: change this to match the SW layout
        SlaveSet = namedtuple('SlaveSet', 'name config_func')
        self._expected_slave_layout = {0: SlaveSet('EK1100', None),
                                       1: SlaveSet('EK1122', None),
                                       2: SlaveSet('SWMC', self.slave_setup if self._slave_number == 2 else None),
                                       3: SlaveSet('SWMC', self.slave_setup if self._slave_number == 3 else None),
                                       4: SlaveSet('EK1122', None),
                                       5: SlaveSet('SWMC', self.slave_setup if self._slave_number == 5 else None),
                                       6: SlaveSet('SWMC', self.slave_setup if self._slave_number == 6 else None),
                                       7: SlaveSet('SWMC', None)}

    def slave_setup(self, slave_pos):
        print('Setting up slave {0}'.format(slave_pos))
        slave = self._master.slaves[slave_pos]
        slave.sdo_write(0x8100, 8, struct.pack('I', 1))
        slave.sdo_write(0x8101, 8, struct.pack('I', 1))
        slave.sdo_write(0x8102, 8, struct.pack('I', 1))
        slave.dc_sync(1, 10000000)

    def _processdata_thread(self):
        while not self._pd_thread_stop_event.is_set():
            self._master.send_processdata()
            self._actual_wkc = self._master.receive_processdata(10000)
            if self._actual_wkc != self._master.expected_wkc:
                print('[ecat_wheel_calibration] Incorrect wkc')
            time.sleep(0.01)

    def _pdo_update_loop(self):
        self._master.in_op = True
        status_code_m1 = -1
        status_code_m2 = -1
        status_code_pivot = -1
        self.slave_setup(self._slave_number)
        try:
            calibration_done = False
            while not calibration_done:
                result_m1 = self._master.slaves[self._slave_number].sdo_read(0x8100, 9)
                result_m2 = self._master.slaves[self._slave_number].sdo_read(0x8101, 9)
                result_pivot = self._master.slaves[self._slave_number].sdo_read(0x8102, 9)
                if result_m1:
                    status_code_m1 = int.from_bytes(result_m1, byteorder='little')
                if result_m2:
                    status_code_m2 = int.from_bytes(result_m2, byteorder='little')
                if result_pivot:
                    status_code_pivot = int.from_bytes(result_pivot, byteorder='little')

                print('{0} -- {1} -- {2}'.format(status_code_m1, status_code_m2, status_code_pivot))
                if (status_code_m1 == 7 or status_code_m1 == 8) and \
                   (status_code_m2 == 7 or status_code_m2 == 8) and \
                   (status_code_pivot == 7 or status_code_pivot == 8):
                    calibration_done = True

            self._master.slaves[self._slave_number].sdo_write(0x8100, 8, struct.pack('I', 0))
            self._master.slaves[self._slave_number].sdo_write(0x8101, 8, struct.pack('I', 0))
            self._master.slaves[self._slave_number].sdo_write(0x8102, 8, struct.pack('I', 0))
            if (status_code_m1 == 7) and (status_code_m2 == 7) and (status_code_pivot == 7):
                print('[ecat_wheel_calibration] Calibration successful')
                self._master.slaves[self._slave_number].sdo_write(0x8fff, 1, struct.pack('B', 1))
            else:
                print('[ecat_wheel_calibration] Unsuccessful calibration')
        except KeyboardInterrupt:
            print('[ecat_wheel_calibration] Calibration interrupted')

    def run(self):
        self._master.open(self._ifname)
        if self._master.config_init() <= 0:
            self._master.close()
            raise Exception('[ecat_wheel_calibration] No slaves found')

        for i, slave in enumerate(self._master.slaves):
            slave.config_func = self._expected_slave_layout[i].config_func
            slave.is_lost = False

        self._master.config_map()
        if self._master.state_check(pysoem.SAFEOP_STATE, 50000) != pysoem.SAFEOP_STATE:
            self._master.close()
            raise Exception('[ecat_wheel_calibration] Not all slaves reached SAFEOP state')

        self._master.state = pysoem.OP_STATE

        check_thread = threading.Thread(target=self._check_thread)
        check_thread.start()
        proc_thread = threading.Thread(target=self._processdata_thread)
        proc_thread.start()

        self._master.write_state()
        all_slaves_reached_op_state = False

        # where does the 40 come from?
        for _ in range(40):
            self._master.state_check(pysoem.OP_STATE, 50000)
            if self._master.state == pysoem.OP_STATE:
                all_slaves_reached_op_state = True
                break

        if all_slaves_reached_op_state:
            print('[ecat_wheel_calibration] Starting calibration loop')
            self._pdo_update_loop()

        self._pd_thread_stop_event.set()
        self._ch_thread_stop_event.set()
        proc_thread.join()
        check_thread.join()
        self._master.state = pysoem.INIT_STATE

        # request INIT state for all slaves
        self._master.write_state()
        self._master.close()
        if not all_slaves_reached_op_state:
            raise Exception('[ecat_wheel_calibration] Not all slaves reached OP state')

    @staticmethod
    def _check_slave(slave, pos):
        if slave.state == (pysoem.SAFEOP_STATE + pysoem.STATE_ERROR):
            print('ERROR: slave {} is in SAFE_OP + ERROR, attempting ack.'.format(pos))
            slave.state = pysoem.SAFEOP_STATE + pysoem.STATE_ACK
            slave.write_state()
        elif slave.state == pysoem.SAFEOP_STATE:
            print('WARNING: slave {} is in SAFE_OP, try change to OPERATIONAL.'.format(pos))
            slave.state = pysoem.OP_STATE
            slave.write_state()
        elif slave.state > pysoem.NONE_STATE:
            if slave.reconfig():
                slave.is_lost = False
                print('MESSAGE: slave {} reconfigured'.format(pos))
        elif not slave.is_lost:
            slave.state_check(pysoem.OP_STATE)
            if slave.state == pysoem.NONE_STATE:
                slave.is_lost = True
                print('ERROR: slave {} lost'.format(pos))

        if slave.is_lost:
            if slave.state == pysoem.NONE_STATE:
                if slave.recover():
                    slave.is_lost = False
                    print('MESSAGE: slave {} recovered'.format(pos))
            else:
                slave.is_lost = False
                print('MESSAGE: slave {} found'.format(pos))

    def _check_thread(self):
        while not self._ch_thread_stop_event.is_set():
            if self._master.in_op and \
              (self._actual_wkc < self._master.expected_wkc or \
               self._master.do_check_state):
                self._master.do_check_state = False
                self._master.read_state()
                for i, slave in enumerate(self._master.slaves):
                    if slave.state != pysoem.OP_STATE:
                        self._master.do_check_state = True
                        WheelCalibrator._check_slave(slave, i)
                if not self._master.do_check_state:
                    print('[ecat_wheel_calibration] OK: all slaves resumed OPERATIONAL.')
            time.sleep(0.01)


if __name__ == '__main__':
    if len(sys.argv) == 3:
        try:
            network_interface_name = sys.argv[1]
            slave_number = int(sys.argv[2])

            print('[ecat_wheel_calibration] Starting calibration of slave {0}'.format(slave_number))
            WheelCalibrator(network_interface_name, slave_number).run()
        except Exception as exc:
            print(type(exc))
            print('[ecat_wheel_calibration] Calibration failed: {0}'.format(str(exc)))
            sys.exit(1)
    else:
        print('Usage: ecat_wheel_calibration ifname slave_number')
        sys.exit(1)
