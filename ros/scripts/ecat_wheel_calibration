#!/usr/bin/env python3

'''Calibration script adapted from
https://github.com/bnjmnp/pysoem/blob/master/examples/basic_example.py
'''

import sys
import struct
import time
import threading
from collections import namedtuple

import pysoem

class WheelCalibrator(object):
    BECKHOFF_VENDOR_ID = 0x0002
    EK1100_PRODUCT_CODE = 0x044c2c52
    EL3002_PRODUCT_CODE = 0x0bba3052
    EL1259_PRODUCT_CODE = 0x04eb3052

    def __init__(self, ifname, slave_number):
        self._ifname = ifname
        self._slave_number = slave_number
        self._pd_thread_stop_event = threading.Event()
        self._ch_thread_stop_event = threading.Event()
        self._actual_wkc = 0
        self._master = pysoem.Master()
        self._master.in_op = False
        self._master.do_check_state = False

        # TODO: change this to match the SW layout
        SlaveSet = namedtuple('SlaveSet', 'name product_code config_func')
        self._expected_slave_layout = {0: SlaveSet('EK1100', self.EK1100_PRODUCT_CODE, None),
                                       1: SlaveSet('EL3002', self.EL3002_PRODUCT_CODE, None),
                                       2: SlaveSet('EL1259', self.EL1259_PRODUCT_CODE, self.slave_setup)}

    def slave_setup(self, slave_pos):
        slave = self._master.slaves[slave_pos]
        slave.sdo_write(0x8100, 8, struct.pack('B', 1))
        slave.dc_sync(1, 10000000)

    def _processdata_thread(self):
        while not self._pd_thread_stop_event.is_set():
            self._master.send_processdata()
            self._actual_wkc = self._master.receive_processdata(10000)
            if not self._actual_wkc == self._master.expected_wkc:
                print('[ecat_wheel_calibration] Incorrect wkc')
            time.sleep(0.01)

    def _pdo_update_loop(self):
        self._master.in_op = True
        status_code = -1
        try:
            calibration_done = False
            while not calibration_done:
                result = self._master.slaves[self._slave_number].sdo_read(0x8100, 9)
                if result:
                    status_code = int.from_bytes(result[0])
                    if status_code == 7 or status_code == 8:
                        calibration_done = True

            if status_code == 7:
                print('[ecat_wheel_calibration] Calibration successful')
            elif status_code == 8:
                print('[ecat_wheel_calibration] Unsuccessful calibration')

            self._master.slaves[self._slave_number].sdo_write(0x8100, 8, struct.pack('B', 0))
        except KeyboardInterrupt:
            print('[ecat_wheel_calibration] Calibration interrupted')

    def run(self):
        self._master.open(self._ifname)
        if not self._master.config_init() > 0:
            self._master.close()
            raise Exception('[ecat_wheel_calibration] No slaves found')

        self._master.config_map()
        if self._master.state_check(pysoem.SAFEOP_STATE, 50000) != pysoem.SAFEOP_STATE:
            self._master.close()
            raise Exception('[ecat_wheel_calibration] Not all slaves reached SAFEOP state')

        self._master.state = pysoem.OP_STATE

        check_thread = threading.Thread(target=self._check_thread)
        check_thread.start()
        proc_thread = threading.Thread(target=self._processdata_thread)
        proc_thread.start()

        self._master.write_state()
        all_slaves_reached_op_state = False

        # where does the 40 come from?
        for _ in range(40):
            self._master.state_check(pysoem.OP_STATE, 50000)
            if self._master.state == pysoem.OP_STATE:
                all_slaves_reached_op_state = True
                break

        if all_slaves_reached_op_state:
            self._pdo_update_loop()

        self._pd_thread_stop_event.set()
        self._ch_thread_stop_event.set()
        proc_thread.join()
        check_thread.join()
        self._master.state = pysoem.INIT_STATE

        # request INIT state for all slaves
        self._master.write_state()
        self._master.close()
        if not all_slaves_reached_op_state:
            raise Exception('[ecat_wheel_calibration] Not all slaves reached OP state')

    @staticmethod
    def _check_slave(slave, pos):
        if slave.state == (pysoem.SAFEOP_STATE + pysoem.STATE_ERROR):
            print('ERROR: slave {} is in SAFE_OP + ERROR, attempting ack.'.format(pos))
            slave.state = pysoem.SAFEOP_STATE + pysoem.STATE_ACK
            slave.write_state()
        elif slave.state == pysoem.SAFEOP_STATE:
            print('WARNING: slave {} is in SAFE_OP, try change to OPERATIONAL.'.format(pos))
            slave.state = pysoem.OP_STATE
            slave.write_state()
        elif slave.state > pysoem.NONE_STATE:
            if slave.reconfig():
                slave.is_lost = False
                print('MESSAGE: slave {} reconfigured'.format(pos))
        elif not slave.is_lost:
            slave.state_check(pysoem.OP_STATE)
            if slave.state == pysoem.NONE_STATE:
                slave.is_lost = True
                print('ERROR: slave {} lost'.format(pos))

        if slave.is_lost:
            if slave.state == pysoem.NONE_STATE:
                if slave.recover():
                    slave.is_lost = False
                    print('MESSAGE: slave {} recovered'.format(pos))
            else:
                slave.is_lost = False
                print('MESSAGE: slave {} found'.format(pos))

    def _check_thread(self):
        while not self._ch_thread_stop_event.is_set():
            if self._master.in_op and \
              (self._actual_wkc < self._master.expected_wkc or \
               self._master.do_check_state):
                self._master.do_check_state = False
                self._master.read_state()
                for i, slave in enumerate(self._master.slaves):
                    if slave.state != pysoem.OP_STATE:
                        self._master.do_check_state = True
                        WheelCalibrator._check_slave(slave, i)
                if not self._master.do_check_state:
                    print('[ecat_wheel_calibration] OK: all slaves resumed OPERATIONAL.')
            time.sleep(0.01)


if __name__ == '__main__':
    if len(sys.argv) == 3:
        try:
            network_interface_name = sys.argv[1]
            slave_number = int(sys.argv[2])

            WheelCalibrator(network_interface_name, slave_number).run()
            print('[ecat_wheel_calibration] Starting calibration of slave {0}'.format(slave_number))
        except Exception as exc:
            print('[ecat_wheel_calibration] Calibration failed: {0}'.format(str(exc)))
            sys.exit(1)
    else:
        print('Usage: ecat_wheel_calibration ifname slave_number')
        sys.exit(1)
